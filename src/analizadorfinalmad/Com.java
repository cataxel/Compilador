package analizadorfinalmad;

import compilerTools.Directory;
import compilerTools.Functions;
import compilerTools.Token;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;

public class Com extends javax.swing.JFrame {

    private Directory directorio;
    //Cosas
    Stack<String> pilaSintactica = new Stack<>();
    private DefaultTableModel modeloTabla;
    int estadoSintactico, posicionEntrada;
    int eliminacionProduccion[] = {0,6,12,0,6,0,10,8,8,8,8,0,18,4,2,6,2,2,2,2,4,4,4,6,6,6,6,6,6,0,6,6,0,4,6,0,6,6,0,4,6,6,0,2,2,2,6,2,2,2};
    Token token;
    Vector<String> tokenEsperados = new Vector<>(1,1);
    boolean banProduccion = false;
    String estadoPila = "", errorMsg = "";
    String produccionTerminal[] = {"programa'", "programa", "declaracion", "declaracion", "sig_declaracion", "sig_declaracion", "bloque", "bloque", "bloque", "bloque", "bloque", "bloque", "for_expresion", "incremento", "inc", "sentencias", "tipo", "tipo", "tipo", "tipo", "expresion", "expresion", "R", "R'", "R'", "R'", "R'", "R'", "R'", "R'", "L", "L", "L", "Exp", "Exp", "Exp", "E'", "E'", "E'", "Term", "T'", "T'", "T'", "Factor", "Factor", "Factor", "Factor", "Factor", "Factor", "inc"};
    //Variables que uso para contar cosas NO SON MUY NECESARIAS

    private String title;
    private Timer timerKeyReleased;
    int valorAnterior = 1;
    int variable = 1;
    int errorFlag = 0; // Bandera para marcar la presencia de errores
    Boolean banP = true; //Bandera para ver si ya se inicio la Pila
    
    String encabezadosColumnas[] = {".","var",";",",","=","if","for","!","{","}","(",")","&&","||","<",">","<=",">=","!=","==","+","-","*","/","VERDADERO","FALSO","id","num","char","Entero","Flotante","Char","Bool","read","print","$","programa","declaracion","sig_declaracion","bloque","for_expresion","incremento","tipo","expresion","sentencia","R","L","Râ€™","Exp","E","Term","T","Factor"};
    
    // Tabla de respaldo por si se desmadra
    String tablaSintactica[][] = {
        //   .	    var	      ;	      ,	      =	     if	     for	  !	     {	      }	      (	      )	     &&	     ||	     <	     >	     <=	     >=	     !=	     ==	      +	      -	      *	      /	     ++	     --	 VERDADERO	FALSO	 id	    num	    char	Entero Flotante	Char	Bool	read	print	  $	 <programa>  <declaracion>	<sig_declaracion>	<bloque>	<for_expresion>	<incremento>	<tipo>	<expresion>	<sentencia>	  <R>	<L> 	<R'>	<Exp>	<E'>	<Term>	<T'>	<Factor>	<inc>
    /*q0*/{"-1",	"I3",	"-1",	"-1",	"-1",	"P3",	"P3",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"P3",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"P3",	"P3",	"-1",	"I1",	     "I2",	        "-1",	          "-1",        	 "-1",	        "-1",	    "-1",	    "-1",	    "-1",	 "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	  "-1",	    "-1"},
    /*q1*/{"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"P0",	"-1",	     "-1",      	"-1",	          "-1",	         "-1",	        "-1",	    "-1",	    "-1",	    "-1",	 "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	  "-1",	    "-1"},
    /*q2*/{"P11",	"-1",	"-1",	"-1",	"-1",	"I6",	"I7",	"-1",	"-1",	"P11",	"-1",	"P11",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"I5",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"I9",	"I8",	"-1",	"-1",   	 "-1",	        "-1",	          "I4",          "-1",      	"-1",	    "-1",	    "-1",	    "-1",	 "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	  "-1",	    "-1"},
    /*q3*/{"-1",    "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",  "I11",  "I12",  "I13",   "I14",  "-1",   "-1",   "-1",   "-1",        "-1",          "-1",             "-1",          "-1",          "-1",       "I10",      "-1",       "-1",    "-1",  "-1",   "-1",   "-1",   "-1",   "-1",   "-1",     "-1",     "-1"},
    /*q4*/{"I15",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",        "-1",          "-1",             "-1",          "-1",          "-1",       "-1",       "-1",       "-1",    "-1",  "-1",   "-1",   "-1",   "-1",   "-1",   "-1",     "-1",     "-1"},
    /*q5*/{"-1",    "-1",   "-1",   "-1",   "I16",  "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",   "-1",        "-1",          "-1",             "-1",          "-1",          "-1",       "-1",       "-1",       "-1",    "-1",  "-1",   "-1",   "-1",   "-1",   "-1",   "-1",     "-1",     "-1"},
    /*q6*/{"-1","-1","-1","P35","-1","-1","-1","I27","-1","-1","I26","-1","-1","-1","P35","P35","P35","P35","P35","P35","-1","I21","-1","-1","-1","-1","I109","I110","I23","I24","I25","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","I17","-1","I18","-1","-1","I19","-1","I20","-1","I22","-1"},
    /*q7*/{"-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","I29","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","I28","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1"},
    /*q8*/{"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"I30",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},
    /*q9*/{"-1",	"-1",	"-1",	"-1",	"I31",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},
   /*q10*/{"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"I32",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},
   /*q11*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P16"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q12*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P17"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q13*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P18"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q14*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P19"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q15*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q16*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"I27"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I33"	"-1"	"I18"	"-1"	"-1"	"I19"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q17*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I34"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q18*/{"-1"	"-1"	"P32"	"P32"	"-1"	"-1"	"-1"	"-1"	"P32"	"-1"	"-1"	"P32"	"I37"	"I38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I36"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q19*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I39"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q20*/{"-1"	"-1"	"-1"	"P38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P38"	"P38"	"P38"	"P38"	"P38"	"P38"	"I47"	"I48"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I46"	"-1"	"-1"	"-1"	"-1"},
/*q21*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I49"	"-1"	"I22"	"-1"},
/*q22*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P42"	"P42"	"I51"	"I52"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I50"	"-1"	"-1"},
/*q23*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P43"	"P43"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q24*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P44"	"P44"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q25*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P45"	"P45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q26*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"I27"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I53"	"-1"	"I18"	"-1"	"-1"	"I19"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q27*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"I27"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I54"	"-1"	"I18"	"-1"	"-1"	"I19"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q28*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I55"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q29*/{"-1"	"I56"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q30*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I57"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q31*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I58"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q32*/{"-1"	"-1"	"P5"	"I60"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I59"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q33*/{"-1"	"-1"	"I61"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q34*/{"P11"	"-1"	"-1"	"-1"	"-1"	"I6"	"I7"	"-1"	"-1"	"P11"	"-1"	"P11"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I5"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I9"	"I8"	"-1"	"-1"	"-1"	"-1"	"I62"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q35*/{"P11"	"-1"	"-1"	"-1"	"-1"	"I6"	"I7"	"-1"	"-1"	"P11"	"-1"	"P11"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I5"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I9"	"I8"	"-1"	"-1"	"-1"	"-1"	"I63"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q36*/{"-1"	"-1"	"P20"	"P20"	"-1"	"-1"	"-1"	"-1"	"P20"	"-1"	"-1"	"P20"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q37*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I64"	"-1"	"-1"	"I19"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q38*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I65"	"-1"	"-1"	"I19"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q39*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P22"	"P22"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q40*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I66"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q41*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I67"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q42*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I68"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q43*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I69"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q44*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I70"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q45*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I71"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q46*/{"-1"	"-1"	"-1"	"P33"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P33"	"P33"	"P33"	"P33"	"P33"	"P33"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q47*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I72"	"-1"	"I22"	"-1"},
/*q48*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I73"	"-1"	"I22"	"-1"},
/*q49*/{"-1"	"-1"	"-1"	"P38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P38"	"P38"	"P38"	"P38"	"P38"	"P38"	"I47"	"I48"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I74"	"-1"	"-1"	"-1"	"-1"},
/*q50*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P39"	"P39"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q51*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I75"	"-1"},
/*q52*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I76"	"-1"},
/*q53*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I77"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q54*/{"-1"	"-1"	"P21"	"P21"	"-1"	"-1"	"-1"	"-1"	"P21"	"-1"	"-1"	"P21"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q55*/{"P11"	"-1"	"-1"	"-1"	"-1"	"I6"	"I7"	"-1"	"-1"	"P11"	"-1"	"P11"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I5"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I9"	"I8"	"-1"	"-1"	"-1"	"-1"	"I78"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q56*/{"-1"	"-1"	"-1"	"-1"	"I79"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q57*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I80"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q58*/{"-1"	"-1"	"I81"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q59*/{"-1"	"-1"	"I111"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q60*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I82"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q61*/{"P11"	"-1"	"-1"	"-1"	"-1"	"I6"	"I7"	"-1"	"-1"	"P11"	"-1"	"P11"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I5"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I9"	"I8"	"-1"	"-1"	"-1"	"-1"	"I83"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q62*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P7"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q63*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I84"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q64*/{"-1"	"-1"	"P32"	"P32"	"-1"	"-1"	"-1"	"-1"	"P32"	"-1"	"-1"	"P32"	"I37"	"I38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I85"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q65*/{"-1"	"-1"	"P32"	"P32"	"-1"	"-1"	"-1"	"-1"	"P32"	"-1"	"-1"	"P32"	"I37"	"I38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I86"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q66*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I87"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q67*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I88"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q68*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I89"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q69*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I90"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q70*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I91"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q71*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P29"	"P29"	"I40"	"I41"	"I42"	"I43"	"I44"	"I45"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I92"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q72*/{"-1"	"-1"	"-1"	"P38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P38"	"P38"	"P38"	"P38"	"P38"	"P38"	"I47"	"I48"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I93"	"-1"	"-1"	"-1"	"-1"},
/*q73*/{"-1"	"-1"	"-1"	"P38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P38"	"P38"	"P38"	"P38"	"P38"	"P38"	"I47"	"I48"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I94"	"-1"	"-1"	"-1"	"-1"},
/*q74*/{"-1"	"-1"	"-1"	"P38"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P38"	"P38"	"P38"	"P38"	"P38"	"P38"	"I47"	"I48"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I95"	"-1"	"-1"	"-1"	"-1"},
/*q75*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P42"	"P42"	"I51"	"I52"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I96"	"-1"	"-1"},
/*q76*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P42"	"P42"	"I51"	"I52"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I97"	"-1"	"-1"},
/*q77*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P46"	"-1"},
/*q78*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P8"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q79*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I98"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q80*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P9"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q81*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P10"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q82*/{"-1"	"-1"	"P5"	"I60"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I99"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q83*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P6"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q84*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P15"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q85*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P30"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q86*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P31"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q87*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P23"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q88*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P24"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q89*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q90*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P26"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q91*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P27"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q92*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P28"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q93*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P36"	"-1"	"-1"	"-1"	"-1"},
/*q94*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P37"	"-1"	"-1"	"-1"	"-1"},
/*q95*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P34"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q96*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P40"	"-1"	"-1"},
/*q97*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P41"	"-1"	"-1"},
/*q98*/{"-1"	"-1"	"-1"	"I100"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q99*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P4"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q100*/{"-1"	"-1"	"-1"	"P35"	"-1"	"-1"	"-1"	"I27"	"-1"	"-1"	"I26"	"-1"	"-1"	"-1"	"P35"	"P35"	"P35"	"P35"	"P35"	"P35"	"-1"	"I21"	"-1"	"-1"	"-1"	"-1"	"I109"	"I110"	"I23"	"I24"	"I25"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I101"	"-1"	"I18"	"-1"	"-1"	"I19"	"-1"	"I20"	"-1"	"I22"	"-1"},
/*q101*/{"-1"	"-1"	"-1"	"I102"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I103"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q102*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I104"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q103*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I105"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q104*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I108"	"I107"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"I106"},
/*q105*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P12"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q106*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P13"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q107*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P14"},
/*q108*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P49"},
/*q109*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P47"	"-1"},
/*q110*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P48"	"-1"},
/*q111*/{"-1"	"I3"	"-1"	"-1"	"-1"	"P3"	"P3"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P3"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P3"	"P3"	"-1"	"-1"	"I112"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"},
/*q112*/{"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"P2"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"	"-1"}};
    
    
    
    NumeroLinea numeroLinea;

    public Com() {
        initComponents();
        Inicializa();
        cosasVisuales();
        Inicial();

    }

    private void Inicial() {

        title = "Compiler";

        // Coloca la ventana en el centro de la pantalla.
        setLocationRelativeTo(null);

        //Numero de linea
        numeroLinea = new NumeroLinea(escritura);
        jScrollPane1.setRowHeaderView(numeroLinea);

        // Crea un nuevo objeto Directory.
        // "this" se refiere al objeto actual, "escritura" es una referencia a algÃºn tipo de componente de texto, "title" es el tÃ­tulo y ".ldas"  la extensiÃ³n de un tipo de archivo.
        directorio = new Directory(this, escritura, title, ".mad");

        // Agrega un escuchador de eventos a la ventana. Este escuchador responde a cuando la ventana se estÃ¡ cerrando.
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Antes de que la ventana se cierre, se llama a la funciÃ³n Exit() del objeto directorio.
                directorio.Exit();
                // DespuÃ©s se cierra la aplicaciÃ³n.
                System.exit(0);
            }
        });

        // Se llama a una funciÃ³n que parece establecer un nÃºmero de lÃ­nea en el componente de texto "escritura".
        //Functions.setLineNumberOnJTextComponent(escritura);
        // Inicializa un nuevo temporizador que se detiene despuÃ©s de 0.3 segundos.
        timerKeyReleased = new Timer((int) (1000 * 0.3), (ActionEvent e) -> {
            timerKeyReleased.stop();
        });

        // Llama a una funciÃ³n que parece insertar un asterisco en el nombre. 
        // La funciÃ³n tambiÃ©n reinicia el temporizador cuando se libera una tecla.
        Functions.insertAsteriskInName(this, escritura, () -> {
            timerKeyReleased.restart();
        });

        // Configura un componente de texto "escritura" para autocompletar basado en un conjunto de cadenas vacÃ­o.
        // La funciÃ³n tambiÃ©n reinicia el temporizador cuando se libera una tecla.
    }

    public void Inicializa() {
        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Pila");
        modeloTabla.addColumn("Token");
        modeloTabla.addColumn("Accion");
        modeloTabla.addColumn("Indice");
        jTable1.setModel(modeloTabla);
        pilaSintactica.clear();
        pilaSintactica.add("$");
        pilaSintactica.add("I0");
    }

    private void analisisLexico() {
        Lexer lexer = null;// Creamos un objeto lexer
        try {
            File sourceCodeFile = new File("code.encrypter");// Creamos un nuevo archivo llamado "code.encrypter" 

            FileOutputStream fileOutputStream = new FileOutputStream(sourceCodeFile);// Creamos un flujo de salida para escribir datos al archivo
            byte[] bytesOfText = escritura.getText().getBytes();// Obtenemos el texto de la variable escritura y lo convertimos a bytes      

            fileOutputStream.write(bytesOfText); // Escribimos los bytes al archivo

            BufferedReader fileInputReader = new BufferedReader(new InputStreamReader(new FileInputStream(sourceCodeFile), "UTF8"));// Creamos un flujo de entrada para leer datos del archivo,

            lexer = new Lexer(fileInputReader);// Inicializamos el lexer con el contenido del archivo

            while (true) { // Iteramos a travÃ©s de cada token producido por el lexer hasta que no haya mÃ¡s
                token = lexer.yylex();
                if (token == null) {
                    break;
                }
                // nota en caso de encontrar un error manda a llamar el metodo
                if (token.getLexicalComp().equals("ERROR"))
                {
                    this.Error("Lexico", token.getLine(), token.getLexeme());
                    break;
                }
                // cada vez que saca un componente lexico lo manda al analisis sintactico
                this.AnalizadorSintactico(token.getLexicalComp());
            }
        } catch (FileNotFoundException ex) {
            // En caso de que el archivo no pueda ser encontrado, se muestra un mensaje de error
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            // En caso de un error de entrada/salida, se muestra un mensaje de error
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
    }
    
    public void AnalizadorSintactico(String token)
    {
        do
        {
            switch(pilaSintactica.peek().charAt(0))
            {
                case 'I':
                    this.DesplasarEstado(token);
                    break;
                case 'P':
                    this.Produccion(token);
                    break;
                default:
                    this.Error("Sintactico", this.token.getLine(), token);
            }
        }while(banProduccion);
    }
    
    @SuppressWarnings("empty-statement")
    public void DesplasarEstado(String token)
    {
        estadoPila = pilaSintactica.peek().substring(1);
        estadoSintactico = Integer.parseInt(estadoPila);
        for(posicionEntrada = 0; posicionEntrada < encabezadosColumnas.length && !encabezadosColumnas[posicionEntrada].equals(token); posicionEntrada++);
        
        switch(tablaSintactica[estadoSintactico][posicionEntrada].charAt(0))
        {
            case 'I':
                pilaSintactica.push(token);
                pilaSintactica.push(tablaSintactica[estadoSintactico][posicionEntrada]);
                break;
            case 'P': 
                this.Produccion(token);
                break;
            default:
                this.Error("Sintactico", this.token.getLine(), token);
        }
    }
    @SuppressWarnings("empty-statement")
    public void Produccion(String token)
    {
        if(!token.equals("P0"))
        {
            int numeroProduccion, numeroEliminacion;
            numeroProduccion = Integer.parseInt(token.substring(1));
            numeroEliminacion = eliminacionProduccion[numeroProduccion];
            
            for(int x = 0; x < numeroEliminacion; x++)
                pilaSintactica.pop();
            
            estadoSintactico = Integer.parseInt(pilaSintactica.peek().substring(1));
            for(posicionEntrada = 0; posicionEntrada < encabezadosColumnas.length && !encabezadosColumnas[posicionEntrada].equals(produccionTerminal[numeroProduccion]); posicionEntrada++);
            
            pilaSintactica.push(produccionTerminal[numeroProduccion]);
            pilaSintactica.push(tablaSintactica[estadoSintactico][posicionEntrada]);
            
            banProduccion = true;
        }
        else
        {
            banProduccion = false;
        }
    }
    public void Error(String tipoError, int numeroLinea, String token)
    {
        switch(tipoError)
        {
            case "Lexico":
                errorMsg = "Error Lexico linea " + numeroLinea + ": token [ " + token + " ] ";
                this.ErrorLexico();
                break;
            case "Sintactico":
                this.ErrorSintactico(token);
                break;
            case "Semantico":
                break;
        }
    }
    private void ErrorLexico()
    {
        // En funciÃ³n del tipo de error, aÃ±adir el mensaje correspondiente
        if (token.getLexeme().matches("[\"]")) {
            errorMsg += "se esperaba comilla doble de cierre ";
            errorFlag = 1;
        } else if (token.getLexeme().matches("[\']")) {
            errorMsg += "se esperaba comilla simple de cierre ";
            errorFlag = 1;
        } else if (token.getLexeme().matches("'[^']*'")) {
            errorMsg += "se esperaba solo un caracter entre las comillas simples ";
            errorFlag = 1;
        } else {
            errorMsg += "no es valido ";
            errorFlag = 1;
        }

        // AÃ±adir la lÃ­nea y columna del error
        errorMsg += "[" + token.getLine() + ", " + token.getColumn() + "]\n";

        // Actualizar el contenido del campo mensajes
        mensajes.setText(mensajes.getText() + errorMsg);
    }
    private void ErrorSintactico(String token)
    {
        for(int x = 0; x < 38; x++)
            if(!tablaSintactica[Integer.parseInt(estadoPila)][x].equals("-1"))
                tokenEsperados.addElement(encabezadosColumnas[x]);
                
    }
//*********************************************************************** */
//           
//            modeloTabla.addRow(new Object[]{pila.toString(), " ", " "});

//    public void AnalisisSintactico(String token, int linea,String caracter) {

//        String indice = Renglon() + "-" + Columna(token);
//        accion = matriz[Renglon()][Columna(token)];
//
//        try {
//
//            switch (pila.peek()) {
//
//                case "{":
//                    if (accion.equals("ent id lista_argumentos ")) {
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba un { \n" + "atras del token: " + token + "\n");
//
//                        break;
//                    }
//            }
//
//            if (token.equals(pila.peek())) {
//                accion = "Concuerda";
//                if (token.equals("$")) {
//                    //Aqui le queria poner unas cosillas  
//                    
//                    
//                    pila.pop();
//                    modeloTabla.addRow(new Object[]{pila.toString(), pila.peek(), accion, indice});
//                    
//                    return;
//                } else // Si el token de entrada no es el sÃ­mbolo de fin de entrada, procesa el sÃ­mbolo en la cima de la pil
//                {
//                    
//                    modeloTabla.addRow(new Object[]{pila.toString(), pila.peek(), accion, indice});
//                    
//                }
//                pila.pop();
//                 modeloTabla.addRow(new Object[]{pila.toString(), pila.peek(), accion, indice});
//
//            }else if(terminal(pila.peek(),token)){
//                
//                mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba " +pila.peek()+" \n");
//                pila.pop();
//                modeloTabla.addRow(new Object[]{pila.toString(), pila.peek(), accion, indice});
//                this.AnalisisSintactico(token, linea,caracter);//Sigue con el mismo toke  
//            }else if (accion == "saltar ") {
//                
//                
//                 if (caracter.contains("\"")) {
//
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba cierre de comillas\n");
//
//                          
//                                 
//                        }
//                 
//                 
//                 if (caracter.contains("\'")) {
//
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba cierre de comilla simple\n");
//
//                           
//                        }
//
//                switch (pila.peek()) {
//                    case "prog ":
//
//                        if (banpr) {
//
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba la palabra 'Inicio' \n");
//
//                            banpr = false;
//                        }
//                        break;
//
//                    case "id":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba un id \n");
//                        break;
//
//                    case "{":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una llabe de apertura '{' \n");
//                        break;
//
//                    case "}":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una llabe de cierre '}' \n");
//                        break;
//
//                    case "(":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una parentecis de apertura '(' \n");
//                        break;
//
//                    case ")":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una parentecis de cierre ')' \n");
//                        break;
//
//                    case "L":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaban argumentos \n");
//                        break;
//
//                    case "T'":
//                        if (token.equals(",")) {
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": no puede seguir un ' , ' \n");
//                        } else {
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaban algun operador o comparacion \n");
//                        }
//                        break;
//
//                    case ";":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba ;  \n");
//
//                        break;
//
//                    case "sigid":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba ;  \n");
//
//                        break;
//                        
//                        case "=":
//                        if(!token.equals(pila.peek())){
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba =  \n");
//                        }
//                        break;
//                        
//                        case "sentencias":
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una sentencia  \n");
//
//                        break;
//                }
//
//                System.out.println(pila.toString());
//                modeloTabla.addRow(new Object[]{pila.toString(), token, accion, indice});
//
//                return;
//
//            } else if (accion == "sacar ") {
//
//                switch (pila.peek()) {
//                    case "prog ":
//
//                        if (banpr) {
//
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba la palabra 'Inicio' \n");
//
//                            banpr = false;
//                        }
//                        break;
//
//                    case "id":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba un id \n");
//                        break;
//
//                    case "{":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una llabe de apertura '{' \n");
//                        break;
//
//                    case "}":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una llabe de cierre '}' \n");
//                        break;
//
//                    case "(":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una parentecis de apertura '(' \n");
//                        break;
//
//                    case ")":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba una parentecis de cierre ')' \n");
//                        break;
//
//                    case "L":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaban argumentos \n");
//                        break;
//
//                    case "T'":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaban ; \n");
//
//                        break;
//
//                    case "sigid":
//
//                        mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba ;  \n");
//
//                        break;
//                    case "dec":
//                        // verifica si el token no es un tipo de dato
//                        if (!tipo(token)) {
//                            mensajes.setText(mensajes.getText() + "Error sintactico linea " + linea + ": Se esperaba tipo  \n");
//                        }
//                        break;
//
//                }
//
//                modeloTabla.addRow(new Object[]{pila.toString(), token, accion, indice});
//                System.out.println(pila.toString());
//
//                System.out.println("ERROR: Antes del pop habia:  " + token);
//                pila.pop();
//                System.out.println("ERROR: Despues del pop habia:  " + token);
//                this.AnalisisSintactico(token, linea,caracter);//Sigue con el mismo token   
//
//            } else if (accion == "0 ") {
//
//                modeloTabla.addRow(new Object[]{pila.toString(), token, accion, indice});
//                System.out.println(pila.toString());
//                pila.pop();
//                this.AnalisisSintactico(token, linea,caracter);//Sigue con el mismo toke  
//
//            } else {
//                ///PILA AUXILIAR
//
//                String palabras = ""; //Almacena las palabras de la cadena
//                //modeloTabla.addRow(new Object[]{pila.toString(), token, accion, indice});
//                //System.out.println(pila.toString());
//                
//                pila.pop();
//                for (int j = 0; j < accion.length(); j++) //Si el caracter no es un espacio en blanco entonces se concatena pal
//                {
//
//                    if (accion.charAt(j) != ' ') {
//                        palabras += accion.charAt(j) + "";
//                    } //Si es un espacio en blanco indica que se completo una palabra y entonces se agrega la pila auxiliar
//                    else {
//                        pilaaux.push(palabras); //Agrega la palabra a la pila auxiliar
//                        palabras = "";
//                    }
//                }
//                do {
//                    pila.push(pilaaux.pop()); //Agrega los elementos de la pila auxiliar a la pila original
//                } while (!pilaaux.isEmpty());
//
//                modeloTabla.addRow(new Object[]{pila.toString(), token, accion, indice});
//                System.out.println(pila.toString());
//
//                this.AnalisisSintactico(token, linea,caracter);//Sigue con el mismo token
//
//            }
//
//        } catch (Exception e) {
//            System.out.println("cdscsdx");
//        }
//
//    }
//
//    private boolean tipo(String token) {
//        List<String> tipos = Arrays.asList("ent", "texto", "flot", "dbl", "char", "bool");
//        boolean resultado = tipos.contains(token);
//        return resultado;
//    }
//
//    private void llenarPila() {
//        tokens.forEach(token -> {
//
//            variable = token.getLine();
//
//            //Imprimir el token en mi JTextpanel de mi analizador lexico 
//            if (token.getLexicalComp() == "pReservada" || token.getLexicalComp() == "tipoDa") {
//
//                AnalisisSintactico(token.getLexeme(), token.getLine(),token.getLexeme());
//            }  else if (token.getLexicalComp() == "ERROR") {
//                 AnalisisSintactico(token.getLexicalComp(), token.getLine(),token.getLexeme());
//            }else {
//
//                AnalisisSintactico(token.getLexicalComp(), token.getLine(),token.getLexeme());
//
//            }
//        });
//        
//         mensajes.setText(mensajes.getText() + "Analisis terminado...");
//    }
//    private boolean terminal(String Ptoken,String token){
//        for (String encabezadosColumna : encabezadosColumnas) {
//            if(encabezadosColumna.equals(Ptoken)){
//                return !Ptoken.equals(token);
//            }
//        }
//        return false;
//    }
//    private void llenarJPnaleTokens() {
//        tokens.forEach(token -> {
//
//            variable = token.getLine();
//
//            //solucion rapida para imprimir el salto de linea casda que se encuentre cambio en la linea 
//            if (variable != valorAnterior) {
//                lexico.setText(lexico.getText() + "\n");// Imprimir salto de lÃ­nea
//                valorAnterior = token.getLine();
//            }
//            if (token.getLexicalComp() == "pReservada" || token.getLexicalComp() == "tipoDa") {
//
//                lexico.setText(lexico.getText() + " " + token.getLexeme());
//                //Imprimir el token en mi JTextpanel de mi analizador lexico 
//            } else if (token.getLexicalComp() == "ERROR") {
//                lexico.setText(lexico.getText() + " ");
//            } else {
//
//                lexico.setText(lexico.getText() + " " + token.getLexicalComp());
//            }
//
//        });
//    }

//    //ESTE METODO ES DE MARTIN SABRA DIOS DE DONDE SE SACO ESA SOLUCION PROVICIONAL XD
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        mensajes = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        escritura = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        lexico = new javax.swing.JTextPane();
        bRun = new javax.swing.JButton();
        bNuevo = new javax.swing.JButton();
        bAbrir = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane3.setViewportView(mensajes);

        jTabbedPane1.addTab("Errores", jScrollPane3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jTabbedPane1.addTab("Pila", jScrollPane4);

        jScrollPane1.setViewportView(escritura);

        jScrollPane2.setViewportView(lexico);

        bRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/boton-de-play.png"))); // NOI18N
        bRun.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bRun.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/jugar (1).png"))); // NOI18N
        bRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRunActionPerformed(evt);
            }
        });

        bNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo.png"))); // NOI18N
        bNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bNuevo.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo (1).png"))); // NOI18N
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });

        bAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/caja (1).png"))); // NOI18N
        bAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bAbrir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/caja (2).png"))); // NOI18N
        bAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbrirActionPerformed(evt);
            }
        });

        bGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disquete (1).png"))); // NOI18N
        bGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bGuardar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/salvar (1).png"))); // NOI18N
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CODIGO");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("LEXICO");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        jMenuItem4.setText("Compilar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Salir");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(bNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bAbrir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bRun))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAbrir)
                    .addComponent(bNuevo)
                    .addComponent(bGuardar)
                    .addComponent(bRun))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(15, 15, 15)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRunActionPerformed
        StyledDocument doc = escritura.getStyledDocument();
        try{
            if (doc.getLength() > 0 && doc.getText(doc.getLength() - 1, 1).equals("$")) {
            // No se agrega otro sÃ­mbolo de dÃ³lar ($) si ya existe
        } else {
            // Inserta el sÃ­mbolo de dÃ³lar ($) al final del texto
            doc.insertString(doc.getLength(), "$", null);
        }
        }catch(BadLocationException e){

        }
        this.Inicializa();

//        banP = true;
//        banpr = true;
//        renglones = 0;
//        columnas = 0;
//        mensajes.setText("");
//        
//        
//        if (escritura.getText().isEmpty()){
//         mensajes.setText("No hay nada que analizar");
//        
//        }else {
//          borrarComponentes();
//        analisisLexico();
//        llenarJPnaleTokens();
//        analisisLexicoEerr();
//        AnalisisSintacticoInicioPila();
//        llenarPila();
//        noDuplicados();
//        
//        }

        
        
      
    }//GEN-LAST:event_bRunActionPerformed

    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
        directorio.New();
        borrarComponentes();// TODO add your handling code here:
    }//GEN-LAST:event_bNuevoActionPerformed

    private void bAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbrirActionPerformed
        if (directorio.Open()) {

            borrarComponentes();
        }
    }//GEN-LAST:event_bAbrirActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        if (directorio.Save()) {
            borrarComponentes();
        }
    }//GEN-LAST:event_bGuardarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        directorio.New();
        borrarComponentes();// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (directorio.Open()) {

            borrarComponentes();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
//        pila.clear();
//        borrarComponentes();
//        analisisLexico();
//        llenarJPnaleTokens();
//        analisisLexicoEerr();
//        AnalisisSintacticoInicioPila();
//        llenarPila();
        //imprimirConsola();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public void cosasVisuales() {

    }

    
    public void noDuplicados(){
    
    String[] lines = mensajes.getText().split("\n");
                Set<String> set = new LinkedHashSet<String>(Arrays.asList(lines));

                String noDuplicateText = String.join("\n", set);
                mensajes.setText(noDuplicateText);
    
    }
    
    private void borrarComponentes() {

        lexico.setText("");
        valorAnterior = 1;
        variable = 1;
        mensajes.setText("");
        
        // errors.clear();
        // identProd.clear();
        // identificadores.clear();
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Com().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAbrir;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bNuevo;
    private javax.swing.JButton bRun;
    private javax.swing.JTextPane escritura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane lexico;
    private javax.swing.JTextPane mensajes;
    // End of variables declaration//GEN-END:variables
}

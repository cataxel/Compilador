package analizadorfinalmad;

import compilerTools.Directory;
import compilerTools.Functions;
import compilerTools.Token;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.stream.Collectors;
import static javax.management.Query.value;
import javax.swing.JTextPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

public class Com extends javax.swing.JFrame {

    private Directory directorio;
    //Cosas
    Stack<String> pilaSintactica = new Stack<>();
    Stack<Integer> pilaSemantica = new Stack<>();
    Stack<Integer> pilaOperadores = new Stack<>();
    Stack<String> operadores = new Stack<>();
    private DefaultTableModel modeloTabla;
    int estadoSintactico, posicionEntrada, tipoDato, datoAsignacion, linea = 1, variable = 0;
    int eliminacionProduccion[] = {0,6,12,0,6,0,10,8,8,10,10,0,18,4,2,6,2,2,2,2,4,4,4,6,6,6,6,6,6,0,6,6,0,4,6,0,6,6,0,4,6,6,0,2,2,2,6,2,2,2};
    Token token;
    HashMap<String, Integer> tablaSimbolos = new HashMap<>();
    Vector<String> tokenEsperados = new Vector<>(1,1);
    boolean banProduccion = false, banCondicional = false, banError = false, banIf = false, banFor = false, banEndFor = false;
    String estadoPila = "", errorMsg = "", codigoIntermedio = "", valorExpresion = "", incremento = "";
    String produccionTerminal[] = {"programa'", "programa", "declaracion", "declaracion", "sig_declaracion", "sig_declaracion", "bloque", "bloque", "bloque", "bloque", "bloque", "bloque", "for_expresion", "incremento", "inc", "sentencia", "tipo", "tipo", "tipo", "tipo", "expresion", "expresion", "R", "R'", "R'", "R'", "R'", "R'", "R'", "R'", "L", "L", "L", "Exp", "Exp", "Exp", "E'", "E'", "E'", "Term", "T'", "T'", "T'", "Factor", "Factor", "Factor", "Factor", "Factor", "Factor", "inc"};
    
    //Variables que uso para contar cosas NO SON MUY NECESARIAS

    private String title;
    private Timer timerKeyReleased;
   
      String encabezadosColumnas[] = {".", "var", ";", ",", "=", "if", "for", "?", "{", "}", "(", ")", "&&", "||", "<", ">", "<=", ">=", "!=", "==", "+", "-", "*", "/", "++", "--", "VERDADERO", "FALSO", "id", "num", "char", "Entero", "Flotante", "Char", "Bool", "read", "print", "$", "programa", "declaracion", "sig_declaracion", "bloque", "for_expresion", "incremento", "tipo", "expresion", "sentencia", "R", "L", "R'", "Exp", "E'", "Term", "T'", "Factor", "inc"};
    
    // Tabla de respaldo por si se desmadra
    String tablaSintactica[][] = {
        //    .	     var     ;      ,      =	 if     for    !      {	      }	    (       )     &&     ||     <      >      <=      >=    !=	   ==      +     -      *      /      ++     --  VERDADEROFALSO   id    num    charEntero Flotante  Char   Bool   read   print   $  programa declar sig_dec bloquefor_exp increm tipo  expre  senten  <R>     <L>   <R'>   <Exp>  <E'>  <Term>  <T'> <Factor> <inc>
    /*q0*/{  "P3",  "I3",  "-1",  "-1",  "-1",  "P3",  "P3",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P3",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P3",  "P3",  "-1",  "I1",  "I2",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q1*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P0",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q2*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1",  "I4",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q3*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I11", "I12", "I13", "I14",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I10",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q4*/{ "I15",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q5*/{  "-1",  "-1",  "-1",  "-1", "I16",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q6*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1", "I27", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I17",  "-1", "I18",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
    /*q7*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I29",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I28",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
    /*q8*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I30",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",	"-1",  "-1",  "-1"},
    /*q9*/{  "-1",  "-1",  "-1",  "-1", "I31",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",	 "-1",  "-1",  "-1",  "-1"},
   /*q10*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I32",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",	 "-1",	"-1",  "-1",  "-1"},
   /*q11*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P16",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q12*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P17",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q13*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P18",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q14*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P19",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q15*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q16*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1", "I27", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I33",  "-1", "I18",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q17*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I35",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I34",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q18*/{  "-1",  "-1", "P32", "P32",  "-1",  "-1",  "-1",  "-1", "P32",  "-1",  "-1", "P32", "I37", "I38",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I36",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q19*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I39",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q20*/{  "-1",  "-1", "P38", "P38",  "-1",  "-1",  "-1",  "-1", "P38",  "-1",  "-1", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "I47", "I48",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I46",  "-1",  "-1",  "-1",  "-1"},
   /*q21*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I26",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I49",  "-1", "I22",  "-1"},
   /*q22*/{  "-1",  "-1", "P42", "P42",  "-1",  "-1",  "-1",  "-1", "P42",  "-1",  "-1", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "I51", "I52",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I50",  "-1",  "-1"},
   /*q23*/{  "-1",  "-1", "P43", "P43",  "-1",  "-1",  "-1",  "-1", "P43",  "-1",  "-1", "P43", "P43", "P43", "P43", "P43", "P43", "P43", "P43", "P43", "P43", "P43", "P43", "P43",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q24*/{  "-1",  "-1", "P44", "P44",  "-1",  "-1",  "-1",  "-1", "P44",  "-1",  "-1", "P44", "P44", "P44", "P44", "P44", "P44", "P44", "P44", "P44", "P44", "P44", "P44", "P44",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q25*/{  "-1",  "-1", "P45", "P45",  "-1",  "-1",  "-1",  "-1", "P45",  "-1",  "-1", "P45", "P45", "P45", "P45", "P45", "P45", "P45", "P45", "P45", "P45", "P45", "P45", "P45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q26*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1", "I27", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I53",  "-1", "I18",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q27*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1", "I27", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I54",  "-1", "I18",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q28*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I35",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I55",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q29*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I56",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q30*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I57",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q31*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I58",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q32*/{  "-1",  "-1",  "P5", "I60",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I59",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q33*/{  "-1",  "-1", "I61",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q34*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1", "I62",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q35*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1", "I63",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q36*/{  "-1",  "-1", "P20", "P20",  "-1",  "-1",  "-1",  "-1", "P20",  "-1",  "-1", "P20",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q37*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I64",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q38*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I65",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q39*/{  "-1",  "-1", "P22", "P22",  "-1",  "-1",  "-1",  "-1", "P22",  "-1",  "-1", "P22", "P22", "P22",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q40*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I66",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q41*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I67",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q42*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I68",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q43*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I69",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q44*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I70",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q45*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I71",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q46*/{  "-1",  "-1", "P33", "P33",  "-1",  "-1",  "-1",  "-1", "P33",  "-1",  "-1", "P33", "P33", "P33", "P33", "P33", "P33", "P33", "P33", "P33",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q47*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I26",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I72",  "-1", "I22",  "-1"},
   /*q48*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I26",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I73",  "-1", "I22",  "-1"},
   /*q49*/{  "-1",  "-1", "P38", "P38",  "-1",  "-1",  "-1",  "-1", "P38",  "-1",  "-1", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "I47", "I48",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I74",  "-1",  "-1",  "-1",  "-1"},
   /*q50*/{  "-1",  "-1", "P39", "P39",  "-1",  "-1",  "-1",  "-1", "P39",  "-1",  "-1", "P39", "P39", "P39", "P39", "P39", "P39", "P39", "P39", "P39", "P39", "P39",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q51*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I75",  "-1"},
   /*q52*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I76",  "-1"},
   /*q53*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I77",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q54*/{  "-1",  "-1", "P21", "P21",  "-1",  "-1",  "-1",  "-1", "P21",  "-1",  "-1", "P21",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q55*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1", "I78",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q56*/{  "-1",  "-1",  "-1",  "-1", "I79",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q57*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I80",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q58*/{  "-1",  "-1", "I81",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q59*/{  "-1",  "-1","I111",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q60*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I82",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q61*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1", "I83",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q62*/{  "P7",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P7",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q63*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I84",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q64*/{  "-1",  "-1", "P32", "P32",  "-1",  "-1",  "-1",  "-1", "P32",  "-1",  "-1", "P32", "I37", "I38",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I85",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q65*/{  "-1",  "-1", "P32", "P32",  "-1",  "-1",  "-1",  "-1", "P32",  "-1",  "-1", "P32", "I37", "I38",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I86",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q66*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I87",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q67*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I88",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q68*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I89",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q69*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I90",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q70*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I91",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q71*/{  "-1",  "-1", "P29", "P29",  "-1",  "-1",  "-1",  "-1", "P29",  "-1",  "-1", "P29", "P29", "P29", "I40", "I41", "I42", "I43", "I44", "I45",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I92",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q72*/{  "-1",  "-1", "P38", "P38",  "-1",  "-1",  "-1",  "-1", "P38",  "-1",  "-1", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "I47", "I48",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I93",  "-1",  "-1",  "-1",  "-1"},
   /*q73*/{  "-1",  "-1", "P38", "P38",  "-1",  "-1",  "-1",  "-1", "P38",  "-1",  "-1", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "I47", "I48",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I94",  "-1",  "-1",  "-1",  "-1"},
   /*q74*/{  "-1",  "-1", "P38", "P38",  "-1",  "-1",  "-1",  "-1", "P38",  "-1",  "-1", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "P38", "I47", "I48",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I95",  "-1",  "-1",  "-1",  "-1"},
   /*q75*/{  "-1",  "-1", "P42", "P42",  "-1",  "-1",  "-1",  "-1", "P42",  "-1",  "-1", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "I51", "I52",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I96",  "-1",  "-1"},
   /*q76*/{  "-1",  "-1", "P42", "P42",  "-1",  "-1",  "-1",  "-1", "P42",  "-1",  "-1", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "P42", "I51", "I52",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I97",  "-1",  "-1"},
   /*q77*/{  "-1",  "-1", "P46", "P46",  "-1",  "-1",  "-1",  "-1", "P46",  "-1",  "-1", "P46", "P46", "P46", "P46", "P46", "P46", "P46", "P46", "P46", "P46", "P46", "P46", "P46",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q78*/{  "P8",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P8",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q79*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1",  "-1", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I98",  "-1", "I20",  "-1", "I22",  "-1"},
   /*q80*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1","I113",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q81*/{ "P11",  "-1",  "-1",  "-1",  "-1",  "I6",  "I7",  "-1",  "-1", "P11",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I5",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "I9",  "I8",  "-1",  "-1",  "-1",  "-1","I114",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q82*/{  "-1",  "-1",  "P5", "I60",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "I99",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q83*/{  "P6",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P6",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q84*/{ "P15",  "-1",  "-1",  "-1",  "-1", "P15", "P15",  "-1",  "-1", "P15",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P15",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P15", "P15",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q85*/{  "-1",  "-1", "P30", "P30",  "-1",  "-1",  "-1",  "-1", "P30",  "-1",  "-1", "P30",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q86*/{  "-1",  "-1", "P31", "P31",  "-1",  "-1",  "-1",  "-1", "P31",  "-1",  "-1", "P31",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q87*/{  "-1",  "-1", "P23", "P23",  "-1",  "-1",  "-1",  "-1", "P23",  "-1",  "-1", "P23", "P23", "P23",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q88*/{  "-1",  "-1", "P24", "P24",  "-1",  "-1",  "-1",  "-1", "P24",  "-1",  "-1", "P24", "P24", "P24",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q89*/{  "-1",  "-1", "P25", "P25",  "-1",  "-1",  "-1",  "-1", "P25",  "-1",  "-1", "P25", "P25", "P25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q90*/{  "-1",  "-1", "P26", "P26",  "-1",  "-1",  "-1",  "-1", "P26",  "-1",  "-1", "P26", "P26", "P26",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q91*/{  "-1",  "-1", "P27", "P27",  "-1",  "-1",  "-1",  "-1", "P27",  "-1",  "-1", "P27", "P27", "P27",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q92*/{  "-1",  "-1", "P28", "P28",  "-1",  "-1",  "-1",  "-1", "P28",  "-1",  "-1", "P28", "P28", "P28",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q93*/{  "-1",  "-1", "P36", "P36",  "-1",  "-1",  "-1",  "-1", "P36",  "-1",  "-1", "P36", "P36", "P36", "P36", "P36", "P36", "P36", "P36", "P36",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q94*/{  "-1",  "-1", "P37", "P37",  "-1",  "-1",  "-1",  "-1", "P37",  "-1",  "-1", "P37", "P37", "P37", "P37", "P37", "P37", "P37", "P37", "P37",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q95*/{  "-1",  "-1", "P34", "P34",  "-1",  "-1",  "-1",  "-1", "P34",  "-1",  "-1", "P34", "P34", "P34", "P34", "P34", "P34", "P34", "P34", "P34",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q96*/{  "-1",  "-1", "P40", "P40",  "-1",  "-1",  "-1",  "-1", "P40",  "-1",  "-1", "P40", "P40", "P40", "P40", "P40", "P40", "P40", "P40", "P40", "P40", "P40",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q97*/{  "-1",  "-1", "P41", "P41",  "-1",  "-1",  "-1",  "-1", "P41",  "-1",  "-1", "P41", "P41", "P41", "P41", "P41", "P41", "P41", "P41", "P41", "P41", "P41",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q98*/{  "-1",  "-1",  "-1","I100",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
   /*q99*/{  "-1",  "-1",  "P4",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q100*/{  "-1",  "-1", "P35", "P35",  "-1",  "-1",  "-1", "I27", "P35",  "-1", "I26", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35", "P35",  "-1", "I21",  "-1",  "-1",  "-1",  "-1","I109","I110", "I23", "I24", "I25",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I101",  "-1", "I18",  "-1",  "-1", "I19",  "-1", "I20",  "-1", "I22",  "-1"},
  /*q101*/{  "-1",  "-1",  "-1","I102",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I103",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q102*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I104",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I103",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q103*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I105",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q104*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I108","I107",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1","I106"},
  /*q105*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P12",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q106*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P13",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q107*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P14",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q108*/{  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1", "P49",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q109*/{  "-1",  "-1", "P47", "P47",  "-1",  "-1",  "-1",  "-1", "P47",  "-1",  "-1", "P47", "P47", "P47", "P47", "P47", "P47", "P47", "P47", "P47", "P47", "P47", "P47", "P47",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q110*/{  "-1",  "-1", "P48", "P48",  "-1",  "-1",  "-1",  "-1", "P48",  "-1",  "-1", "P48", "P48", "P48", "P48", "P48", "P48", "P48", "P48", "P48", "P48", "P48", "P48", "P48",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q111*/{  "-1",  "I3",  "-1",  "-1",  "-1",  "P3",  "P3",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P3",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P3",  "P3",  "-1",  "-1","I112",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q112*/{  "P2",  "-1",  "-1",  "-1",  "-1",  "P2",  "P2",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P2",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P2",  "P2",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q113*/{  "P9",  "-1",  "-1",  "-1",  "-1",  "P2",  "P2",  "-1",  "-1",  "P9",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"},
  /*q114*/{ "P10",  "-1",  "-1",  "-1",  "-1",  "P2",  "P2",  "-1",  "-1", "P10",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "P2",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1",  "-1"}}; 
   
    int tablaSemantica[][] = {
        { 0, 1,-1,-1},
        { 1, 1,-1,-1},
        {-1,-1,-1, 3}};
    
    NumeroLinea numeroLinea;

    public Com() {
        initComponents();
        colors();
        cosasVisuales();
        Inicial();
    }

    private void Inicial() {

        title = "Compiler";

        // Coloca la ventana en el centro de la pantalla.
        setLocationRelativeTo(null);

        //Numero de linea
        numeroLinea = new NumeroLinea(escritura);
        jScrollPane1.setRowHeaderView(numeroLinea);

        // Crea un nuevo objeto Directory.
        // "this" se refiere al objeto actual, "escritura" es una referencia a algún tipo de componente de texto, "title" es el título y ".ldas"  la extensión de un tipo de archivo.
        directorio = new Directory(this, escritura, title, ".mad");

        // Agrega un escuchador de eventos a la ventana. Este escuchador responde a cuando la ventana se está cerrando.
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Antes de que la ventana se cierre, se llama a la función Exit() del objeto directorio.
                directorio.Exit();
                // Después se cierra la aplicación.
                System.exit(0);
            }
        });

        // Se llama a una función que parece establecer un número de línea en el componente de texto "escritura".
        //Functions.setLineNumberOnJTextComponent(escritura);
        // Inicializa un nuevo temporizador que se detiene después de 0.3 segundos.
        timerKeyReleased = new Timer((int) (1000 * 0.3), (ActionEvent e) -> {
            timerKeyReleased.stop();
        });

        // Llama a una función que parece insertar un asterisco en el nombre. 
        // La función también reinicia el temporizador cuando se libera una tecla.
        Functions.insertAsteriskInName(this, escritura, () -> {
            timerKeyReleased.restart();
        });

        // Configura un componente de texto "escritura" para autocompletar basado en un conjunto de cadenas vacío.
        // La función también reinicia el temporizador cuando se libera una tecla.
    }

    public void Inicializa() {
        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Pila");
        modeloTabla.addColumn("Token");
        modeloTabla.addColumn("Accion");
        modeloTabla.addColumn("Indice");
        jTable1.setModel(modeloTabla);
        mensajes.setText("");
        lexico.setText("");
        CodigoIntermedio.setText("");
        tokenEsperados.clear();
        tablaSimbolos.clear();
        pilaSemantica.clear();
        pilaOperadores.clear();
        pilaSintactica.clear();
        pilaSintactica.add("$");
        pilaSintactica.add("I0");
        modeloTabla.addRow(new Object[]{pilaSintactica.toString(), " ", " "});
        banCondicional = false;
        banError = false;
        banProduccion = false;
        banIf = false;
        banFor = false;
        estadoPila = "";
        errorMsg = "";
        valorExpresion = "";
        codigoIntermedio = "";
        estadoSintactico = 0;
        variable = 0;
        linea = 1;
        this.analisisLexico();
    }

    private void analisisLexico() {
        Lexer lexer = null;// Creamos un objeto lexer
        try {
            File sourceCodeFile = new File("code.encrypter");// Creamos un nuevo archivo llamado "code.encrypter" 

            FileOutputStream fileOutputStream = new FileOutputStream(sourceCodeFile);// Creamos un flujo de salida para escribir datos al archivo
            byte[] bytesOfText = escritura.getText().getBytes();// Obtenemos el texto de la variable escritura y lo convertimos a bytes      

            fileOutputStream.write(bytesOfText); // Escribimos los bytes al archivo

            BufferedReader fileInputReader = new BufferedReader(new InputStreamReader(new FileInputStream(sourceCodeFile), "UTF8"));// Creamos un flujo de entrada para leer datos del archivo,

            lexer = new Lexer(fileInputReader);// Inicializamos el lexer con el contenido del archivo

            while (true) { // Iteramos a través de cada token producido por el lexer hasta que no haya más
                token = lexer.yylex();
                if (token == null) {
                    this.AnalizadorSintactico("$");
                    break;
                }
                if(token.getLine() > linea)
                    lexico.setText(lexico.getText() + " \n");
                linea = token.getLine();
                if (token.getLexicalComp().equals("ERROR"))
                {
                    this.Error("Lexico", token.getLine(), token.getLexeme());
                    break;
                }
                if(token.getLexicalComp().equals("pReservada") || token.getLexicalComp().equals("tipoDa"))
                {
                    switch(token.getLexeme())
                    {
                        case "Entero":
                            tipoDato = 0;
                            break;
                        case "Flotante":
                            tipoDato = 1;
                            break;
                        case "Char":
                            tipoDato = 2;
                            break;
                        case "Bool":
                            tipoDato = 3;
                            break;
                    }
                    lexico.setText(lexico.getText() + token.getLexeme() + " ");
                    // Añadimos cada token a la lista de tokens
                    this.AnalizadorSintactico(token.getLexeme());
                }
                else
                {
                    switch(token.getLexicalComp())
                    {
                        case "Entero":
                            tipoDato = 0;
                            break;
                        case "Flotante":
                            tipoDato = 1;
                            break;
                        case "Char":
                            tipoDato = 2;
                            break;
                        case "Bool":
                            tipoDato = 3;
                            break;
                    }
                    lexico.setText(lexico.getText() + token.getLexicalComp()+ " ");
                    // Añadimos cada token a la lista de tokens
                    this.AnalizadorSintactico(token.getLexicalComp());
                }
                if(banError)
                    break;
            }
        } catch (FileNotFoundException ex) {
            // En caso de que el archivo no pueda ser encontrado, se muestra un mensaje de error
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            // En caso de un error de entrada/salida, se muestra un mensaje de error
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
    }
    public void AnalizadorSintactico(String token)
    {
        do
        {
            switch(pilaSintactica.peek().charAt(0))
            {
                case 'I':
                    this.DesplasarEstado(token);
                    break;
                case 'P':
                    this.Produccion(token);
                    break;
                default:
                    this.Error("Sintactico", this.token.getLine(), token);
            }
            if(banError)
                break;
        }while(banProduccion);
    }
    
    @SuppressWarnings("empty-statement")
    int valor;
    public void DesplasarEstado(String token)
    {
        String estadosId[] = {"I5","I104","I57","I58","I56"};
        String estadosExpresion[] = {"I23","I24","I25","I26","I27","I109","I110","I37","I38","I40","I41","I42","I43","I44","I45","I47","I48","I51","I52"};
        String terminoExpresion[] = {"I61","I100","I102"};
        estadoPila = pilaSintactica.peek().substring(1);
        estadoSintactico = Integer.parseInt(estadoPila);
        for(posicionEntrada = 0; posicionEntrada < encabezadosColumnas.length && !encabezadosColumnas[posicionEntrada].equals(token); posicionEntrada++);
        
        switch(tablaSintactica[estadoSintactico][posicionEntrada].charAt(0))
        {
            case 'I':
                pilaSintactica.push(token);
                pilaSintactica.push(tablaSintactica[estadoSintactico][posicionEntrada]);
                if(pilaSintactica.peek().equals("I32") || pilaSintactica.peek().equals("I82"))
                    this.TablaSimbolos();
                for(String var : estadosId)
                    if(pilaSintactica.peek().equals(var))
                        this.ValidarIdentificadorSemantico();
                for(String var : estadosExpresion)
                    if(pilaSintactica.peek().equals(var))
                       this.AnalizadorSemantico();
                for(String var : terminoExpresion)
                    if(pilaSintactica.peek().equals(var))
                    {
                        this.AccionExpresion();
                        if(pilaSintactica.peek().equals("I102"))
                        {
                            banFor = false;
                            codigoIntermedio += "if(!vf1)\n\tgoto end_For;\n";
                            variable = 0;
                        }
                    }
                if(pilaSintactica.peek().equals("I80")){
                    for (String string : tablaSimbolos.keySet()) {
                        if(valorExpresion.equals(string))
                            valor = tablaSimbolos.get(string);
                            break;
                    }
                    switch (valor) {
                                case 0:
                                    codigoIntermedio += "printf(\" %d \" ," + valorExpresion + " );\n";
                                    break;
                                case 1:
                                    codigoIntermedio += "printf(\" %f \" ," + valorExpresion + " );\n";
                                    break;
                                case 2:
                                    codigoIntermedio += "printff(\" %c \" ," + valorExpresion + " );\n";
                                    break;
                                case 3:
                                    codigoIntermedio += "printf(\" %d \" ," + valorExpresion + " );\n";
                                    break;
                                default:
                                    break;
                            }
                }
                if(pilaSintactica.peek().equals("I81")){
                    for (String string : tablaSimbolos.keySet()) {
                        if(valorExpresion.equals(string))
                            valor = tablaSimbolos.get(string);
                            break;
                    }
                    switch (valor) {
                                case 0:
                                    codigoIntermedio += "scanf(\" %d \" ," + valorExpresion + " );\n";
                                    break;
                                case 1:
                                    codigoIntermedio += "scanf(\" %f \" ," + valorExpresion + " );\n";
                                    break;
                                case 2:
                                    codigoIntermedio += "scanf(\" %c \" ," + valorExpresion + " );\n";
                                    break;
                                case 3:
                                    codigoIntermedio += "scanf(\" %d \" ," + valorExpresion + " );\n";
                                    break;
                                default:
                                    break;
                            }
                }    
                if(pilaSintactica.peek().equals("I29"))
                    banFor = true;
                if(pilaSintactica.peek().equals("I6"))
                    banIf = true;
                if(banIf)
                    if(pilaSintactica.peek().equals("I35"))
                    {
                        this.AccionExpresion();
                        codigoIntermedio += "if(!v1)\n\tgoto Else;\n";
                        variable = 0;
                        banIf = false;
                    }
                if(pilaSintactica.peek().equals("I84"))
                {
                    
                    if(banEndFor)
                    {
                        codigoIntermedio += "vf1 = " + valorExpresion + "; \nvf2 = 1; \nvf1 = vf1 " + incremento + " vf2; \ngoto FOR;\nend_For:\n";
                        CodigoIntermedio.setText( codigoIntermedio);
                        banEndFor = false;
                    }
                    else
                        codigoIntermedio += "\tgoto end_IF;\nElse:\n\tgoto end_IF;\nend_IF:\n";
                }
                if(pilaSintactica.peek().equals("I107"))
                    incremento = "-";
                if(pilaSintactica.peek().equals("I108"))
                    incremento = "+";
                if(pilaSintactica.peek().equals("I6") || pilaSintactica.peek().equals("I100"))
                    banCondicional = true;
                modeloTabla.addRow(new Object[]{pilaSintactica.toString(),token,"Desplasar",this.token.getLine()});
                banProduccion = false;
                break;
            case 'P': 
                this.Produccion(tablaSintactica[estadoSintactico][posicionEntrada]);
                break;
            default:
                this.Error("Sintactico", this.token.getLine(), token);
        }
    }
    @SuppressWarnings("empty-statement")
    public void Produccion(String token)
    {
        
        if(!token.equals("P0"))
        {
            modeloTabla.addRow(new Object[]{pilaSintactica.toString(),token,"Produccion",linea});
            int numeroProduccion, numeroEliminacion;
            numeroProduccion = Integer.parseInt(token.substring(1));
            numeroEliminacion = eliminacionProduccion[numeroProduccion];
            
            for(int x = 0; x < numeroEliminacion; x++)
                pilaSintactica.pop();
            
            estadoSintactico = Integer.parseInt(pilaSintactica.peek().substring(1));
            for(posicionEntrada = 0; posicionEntrada < encabezadosColumnas.length && !encabezadosColumnas[posicionEntrada].equals(produccionTerminal[numeroProduccion]); posicionEntrada++);
            
            pilaSintactica.push(produccionTerminal[numeroProduccion]);
            pilaSintactica.push(tablaSintactica[estadoSintactico][posicionEntrada]);
            
            banProduccion = true;
        }
        else
        {
            modeloTabla.addRow(new Object[]{pilaSintactica.toString(),token,"Produccion","EOF"});
            modeloTabla.addRow(new Object[]{"Se Acepta",token,"Produccion","EOF"});
            banProduccion = false;
        }
    }
    public void TablaSimbolos()
    {
        boolean repetida = true;
        
        if(!tablaSimbolos.isEmpty())
            for(String var : tablaSimbolos.keySet())
                if(token.getLexeme().equals(var))
                    repetida = false;
        if(repetida)
        {
            tablaSimbolos.put(token.getLexeme(), tipoDato);
            switch(tablaSimbolos.get(token.getLexeme()))
            {
                case 0:
                    codigoIntermedio += "int " + token.getLexeme() + ";\n";
                    break;
                case 1:
                    codigoIntermedio += "float " + token.getLexeme() + ";\n";
                    break;
                case 2:
                    codigoIntermedio += "char " + token.getLexeme() + ";\n";
                    break;
                case 3:
                    codigoIntermedio += "boolean " + token.getLexeme() + ";\n";
            }
        }
        else
            this.Error("Semantico", token.getLine(), "No se pueden declarar identificadores iguales");
    }
    public void ValidarIdentificadorSemantico()
    {
        boolean banTabla = false;
        if(!tablaSimbolos.isEmpty())
            for(String var : tablaSimbolos.keySet())
                if(token.getLexeme().equals(var))
                    banTabla = true;
        if(banTabla)
        {
            valorExpresion = token.getLexeme();
            datoAsignacion = tablaSimbolos.get(token.getLexeme());
        }
        else
            this.Error("Semantico", token.getLine(), "No puedes utilizar un identificador que no a sido declarado");
    }
    public void AnalizadorSemantico()
    {
        boolean banIdentificador = false;
        String operadoresLogicos[] = {"<",">","<=",">=","?","!=","==","&&","||"};
        if(token.getLexicalComp().equals("id"))
        {
            for(String id : tablaSimbolos.keySet())
                if(token.getLexeme().equals(id))
                    banIdentificador = true;
            if(banIdentificador)
            {
                pilaSemantica.push(tablaSimbolos.get(token.getLexeme()));
                variable++;
                if(!banFor)
                    codigoIntermedio += "v" + variable + " = " + token.getLexeme() + ";\n";
                else
                    codigoIntermedio += "vf" + variable + " = " + token.getLexeme() + ";\n";
            }
            else
                this.Error("Semantico", token.getLine(), "No se puede realizar una operacion con un identificador no declarado");
        }
        else
            if(token.getLexicalComp().equals("num"))
            {
                pilaSemantica.push(0);
                variable++;
                if(!banFor)
                    codigoIntermedio += "v" + variable + " = " + token.getLexeme() + ";\n";
                else
                    codigoIntermedio += "vf" + variable + " = " + token.getLexeme() + ";\n";
            }
            else
                if(token.getLexicalComp().equals("char"))
                    pilaSemantica.push(2);
                else
                    if(token.getLexicalComp().equals("VERDADERO") || token.getLexicalComp().equals("FALSO"))
                        pilaSemantica.push(3);
                    else
                        if(token.getLexicalComp().equals("+") || token.getLexicalComp().equals("-"))
                        {
                            this.AccionesOperadores(0);
                            operadores.push(token.getLexicalComp());
                        }
                        else
                            if(token.getLexicalComp().equals("*") || token.getLexicalComp().equals("/"))
                            {
                                this.AccionesOperadores(1);
                                operadores.push(token.getLexicalComp());
                            }
                            else
                                if(token.getLexicalComp().equals("("))
                                    this.AccionesOperadores(2);
                                else
                                    if(token.getLexicalComp().equals(")"))
                                        this.AccionesOperadores(3);
                                    else
                                        for(String var : operadoresLogicos)
                                            if(token.getLexicalComp().equals(var))
                                            {
                                                this.AccionesOperadores(4);
                                                operadores.push(token.getLexicalComp());
                                            }
    }
    public void AccionesOperadores(int valor)
    {
        if(pilaOperadores.isEmpty())
            pilaOperadores.push(valor);
        else
            switch(valor)
            {
                case 2:
                    pilaOperadores.push(valor);
                    break;
                case 3:
                    for(int var : pilaOperadores)
                        if(var == 2)
                        {
                            pilaOperadores.pop();
                            break;
                        }
                        else
                            this.AccionesDatos(pilaOperadores.pop());
                    break;
                default:
                    do
                        if(pilaOperadores.peek() <= valor)
                            this.AccionesDatos(pilaOperadores.pop());
                        else
                            break;
                    while(!pilaOperadores.isEmpty());
                    pilaOperadores.push(valor);
                    
            }
    }
    public void AccionesDatos(int valor)
    {
        int valor1, valor2, resultado;
        valor1 = pilaSemantica.pop();
        valor2 = pilaSemantica.pop();
        if(valor != 4)
            resultado = tablaSemantica[valor1][valor2];
        else
            resultado = 3;
        
        if(resultado != -1)
        {
            if(!banFor)
                codigoIntermedio += "v" + (variable - 1) + " = v" + (variable - 1) + " " + operadores.pop() + " v" + variable + ";\n";
            else
                codigoIntermedio += "vf" + (variable - 1) + " = vf" + (variable - 1) + " " + operadores.pop() + " vf" + variable + ";\n";
            variable--;
            pilaSemantica.push(resultado);
        }
        else
            this.Error("Semantico", token.getLine(), "La operacion no se puede realizar problemas con tipos de datos");
    }
    public void AccionExpresion()
    {
        while(!pilaOperadores.isEmpty())
            this.AccionesDatos(pilaOperadores.pop());
        int temp = pilaSemantica.pop();
        if(banCondicional)
        {
            banCondicional = false;
            if(temp != 3)
                this.Error("Semantico", token.getLine(), "Las condiciones deben ser de tipo booleano");
        }
        else
            if(datoAsignacion != temp)
                this.Error("Semantico", token.getLine(), "No se puede realizar una asignacion con diferentes tipos de datos");
            else
            {
                if(!pilaSintactica.peek().equals("I100"))
                    codigoIntermedio += valorExpresion + " = " + "v1;\n";
                else
                {
                    codigoIntermedio += valorExpresion + " = vf1;\nFOR:\n";
                    banEndFor = true;
                }
                variable = 0;
                CodigoIntermedio.setText(codigoIntermedio);
            }
    }
    public void Error(String tipoError, int numeroLinea, String token)
    {
        switch(tipoError)
        {
            case "Lexico":
                errorMsg += "Error " + tipoError + " linea " + numeroLinea + ": token [ " + token + " ] ";
                this.ErrorLexico();
                break;
            case "Sintactico":
                errorMsg += "Error " + tipoError + " en " + numeroLinea;
                this.ErrorSintactico(token);
                break;
            case "Semantico":
                errorMsg += "Error " + tipoError + " en " + numeroLinea + ": " + token + "\n";
                break;
        }
        modeloTabla.addRow(new Object[]{"Se Rechaza", "",""});
        mensajes.setText(mensajes.getText() + errorMsg);
        banError = true;
    }
    private void ErrorLexico()
    {
        // En función del tipo de error, añadir el mensaje correspondiente
        if (token.getLexeme().matches("[\"]")) {
            errorMsg += "se esperaba comilla doble de cierre ";
        } else if (token.getLexeme().matches("[\']")) {
            errorMsg += "se esperaba comilla simple de cierre ";
        } else if (token.getLexeme().matches("'[^']*'")) {
            errorMsg += "se esperaba solo un caracter entre las comillas simples ";
        } else {
            errorMsg += "no es valido ";
        }

        // Añadir la línea y columna del error
        errorMsg += "[" + token.getLine() + ", " + token.getColumn() + "]\n";
    }
    private void ErrorSintactico(String token)
    {
        for(int x = 0; x < 38; x++)
            if(!tablaSintactica[Integer.parseInt(estadoPila)][x].equals("-1"))
                tokenEsperados.addElement(encabezadosColumnas[x]);
        errorMsg += " Se resivio " + token + " se esperaba " + String.valueOf(tokenEsperados) + "\n";
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        mensajes = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        CodigoIntermedio = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        escritura = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        lexico = new javax.swing.JTextPane();
        bRun = new javax.swing.JButton();
        bNuevo = new javax.swing.JButton();
        bAbrir = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane3.setViewportView(mensajes);

        jTabbedPane1.addTab("Sintactico y Errores", jScrollPane3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jTabbedPane1.addTab("Pila", jScrollPane4);

        CodigoIntermedio.setColumns(20);
        CodigoIntermedio.setRows(5);
        jScrollPane5.setViewportView(CodigoIntermedio);

        jTabbedPane1.addTab("Codigo Intermedio", jScrollPane5);

        jScrollPane1.setViewportView(escritura);

        jScrollPane2.setViewportView(lexico);

        bRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/boton-de-play.png"))); // NOI18N
        bRun.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bRun.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/jugar (1).png"))); // NOI18N
        bRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRunActionPerformed(evt);
            }
        });

        bNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo.png"))); // NOI18N
        bNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bNuevo.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo (1).png"))); // NOI18N
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });

        bAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/caja (1).png"))); // NOI18N
        bAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bAbrir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/caja (2).png"))); // NOI18N
        bAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbrirActionPerformed(evt);
            }
        });

        bGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disquete (1).png"))); // NOI18N
        bGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bGuardar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/salvar (1).png"))); // NOI18N
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CODIGO");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("LEXICO");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        jMenuItem4.setText("Compilar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Salir");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(bNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bAbrir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bRun))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAbrir)
                    .addComponent(bNuevo)
                    .addComponent(bGuardar)
                    .addComponent(bRun))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(15, 15, 15)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRunActionPerformed
        StyledDocument doc = escritura.getStyledDocument();

        
        
        
        if (escritura.getText().isEmpty()){
         mensajes.setText("No hay nada que analizar");
        
        }else 
            Inicializa();
    }//GEN-LAST:event_bRunActionPerformed

    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
        directorio.New();
        borrarComponentes();// TODO add your handling code here:
    }//GEN-LAST:event_bNuevoActionPerformed

    private void bAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbrirActionPerformed
        if (directorio.Open()) {

            borrarComponentes();
        }
    }//GEN-LAST:event_bAbrirActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        if (directorio.Save()) {
            borrarComponentes();
        }
    }//GEN-LAST:event_bGuardarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        directorio.New();
        borrarComponentes();// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (directorio.Open()) {

            borrarComponentes();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
 

        borrarComponentes();
        analisisLexico();
   
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public void cosasVisuales() {

    }

//    
//    public void noDuplicados(){
//    
//    String[] lines = mensajes.getText().split("\n");
//                Set<String> set = new LinkedHashSet<String>(Arrays.asList(lines));
//
//                String noDuplicateText = String.join("\n", set);
//                mensajes.setText(noDuplicateText);
//    
//    }
    
    /// AQUI ES PARA EL CODIGO DE FERNANDO
    
    
    
    private void borrarComponentes() {

        lexico.setText("");
        
        mensajes.setText("");
     
    }
    
    
     // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // COLOREAR LAS COSAS
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //METODO PARA ENCONTRAR LAS ULTIMAS CADENAS
    private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            //  \\W = [A-Za-Z0-9]
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    //METODO PARA ENCONTRAR LAS PRIMERAS CADENAS 
    private int findFirstNonWordChar(String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }   
 //METODO PARA PINTAS LAS PALABRAS RESEVADAS
    private void colors() {

        final StyleContext cont = StyleContext.getDefaultStyleContext();

        //COLORES 
        final AttributeSet attred = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(225, 123, 13));//naranja
        final AttributeSet attgreen = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(48, 101, 59)); //verde
        final AttributeSet attblue = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0)); //Blanco
        final AttributeSet attblack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(145, 55, 76));
        final AttributeSet blanco = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0)); //Blanco
        //STYLO 
        DefaultStyledDocument doc = new DefaultStyledDocument() {
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offset, str, a);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                if (before < 0) {
                    before = 0;
                }
                int after = findFirstNonWordChar(text, offset + str.length());
                int wordL = before;
                int wordR = before;

                while (wordR <= after) {
                    if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
                        if (text.substring(wordL, wordR).matches("(\\W)*()")) { //Azul 
                            setCharacterAttributes(wordL, wordR - wordL, attblue, false);
                        } else if (text.substring(wordL, wordR).matches("(\\W)*(para|verdadero|falso|mensaje|lectura)")) { //verde
                            setCharacterAttributes(wordL, wordR - wordL, attgreen, false);
                        } else if (text.substring(wordL, wordR).matches("(\\W)*(Inicio|metodo|si|sino|hacer|mientras)")) { // blanco
                            setCharacterAttributes(wordL, wordR - wordL, attred, false);
                        } 
                         else if (text.substring(wordL, wordR).matches("(\\W)*($)")) { // blanco
                            setCharacterAttributes(wordL, wordR - wordL, blanco, false);
                        
                         }else {
                            setCharacterAttributes(wordL, wordR - wordL, attblack, false);
                        }
                        wordL = wordR;

                    }
                    wordR++;
                }
            }

            public void romeve(int offs, int len) throws BadLocationException {
                super.remove(offs, len);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                if (before < 0) {
                    before = 0;
                }
            }
        };

        JTextPane txt = new JTextPane(doc);
        String temp = escritura.getText();
        escritura.setStyledDocument(txt.getStyledDocument());
        escritura.setText(temp);

    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    
    

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Com().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CodigoIntermedio;
    private javax.swing.JButton bAbrir;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bNuevo;
    private javax.swing.JButton bRun;
    private javax.swing.JTextPane escritura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane lexico;
    private javax.swing.JTextPane mensajes;
    // End of variables declaration//GEN-END:variables
}
